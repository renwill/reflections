What happens when you initialize a repository? Why do you need to do it?

"git init" gives the message initialized empty Git repository in the working directory and creates  a .git folder to store all the files' history information


How is the staging area different from the working directory and the repository?
Staging area is a place where a logical set of files will get committed together.

What value do you think it offers?
It allows a set of related changes to be grouped together to reflect a logical change and commit in the repository

How can you use the staging area to make sure you have one commit per logical change?
Use "git add" to add all the files of the logical changes to the staging area and use  "git reset HEAD" to remove any accidental addition from the staging area before issuing the "git commit" command.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- New features, bug fixes, trying out things 
- branches allows independent changes without affecting what has been working on

How do the diagrams help you visualize the branch structure?
It allows me to visualize where the branches diverts and what changes have been made in each of them after the diversion

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
It will combine the changes made by the two branches and create a new commit with the branch label of the branch checked out.  The diagram shows both branches converges to a new commit after merging.

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?

Auto-merging encourages parallel independent development with minimal extra efforts while manual merges allow review of independent changes to ensure consistency and avoid unexpected bugs or behaviour.

Others
======
"git diff" compares the working directory and the staging area
"git diff -staged" compares the staging area and the repository's most recent commit
"git diff commit1 commit2" compares the two commits
"git reset HEAD 'file-X'" removes 'file-X' from the staging area.
"git checkout -- 'file'" discards the changes of the 'file' and restores the last committed version
"git checkout <filename>" vs "git checkout -- <filename>"
The special "option" -- means "treat every argument after this point as a file name, no matter what it looks like." This is not Git-specific, it's a general Unix command line convention. Git uses it to distinguish file names from branch names. In Unix, you need it when the file you want to revert has a name that begins with -.

Using “git commit -a”
If you intend that your next commit should record all modifications of tracked files in the working tree and record all removals of files that have been removed from the working tree with rm (as opposed to git rm), use git commit -a, as it will automatically notice and record all removals.

If you make an initial commit and then realize you forgot to stage the changes in a file you wanted to add to this commit, you can do something like this:
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend

Using “git add -A”
When accepting a new code drop for a vendor branch, you probably want to record both the removal of paths and additions of new paths as well as modifications of existing paths. Typically you would first remove all tracked files from the working tree using this command:
       git ls-files -z | xargs -0 rm -f
and then untar the new code in the working tree. Alternately you could rsync the changes into the working tree. After that, the easiest way to record all removals, additions, and modifications in the working tree is:    git add -A

"git rm [-f]  [-r] [--cached] [--] <file>…​" removes files from the index (--cached), or from the working tree and the index (-r: recursively for directories). 

"git branch 'branch-name' then git checkout 'branch-name'" creates a branch and change working directory to point to the branch head. 

"git branch -d the_local_branch" would delete a local branch; or by force "git branch -D the_local_branch"

"git push origin :the_remote_branch" would remove a remote branch; or use "git push origin --delete <branchName>"


git checkout -b|-B <new_branch> [<start point>]
Specifying -b causes a new branch to be created as if git-branch[1] were called and then checked out. In this case you can use the --track or --no-track options, which will be passed to git branch. As a convenience, --track without -b implies branch creation.
If -B is given, <new_branch> is created if it doesn’t exist; otherwise, it is reset. This is the transactional equivalent of
   $ git branch -f <branch> [<start point>]
   $ git checkout <branch>

"git reflog" 
Git keeps track of updates to the tip of branches using a mechanism called reflog. This allows you to go back to changesets even though they are not referenced by any branch or tag. After rewriting history, the reflog contains information about the old state of branches and allows you to go back to that state if necessary.

http://think-like-a-git.net/sections/rebase-from-the-ground-up/using-git-cherry-pick-to-simulate-git-rebase.html
What git cherry-pick does, basically, is take a commit from somewhere else, and "play it back" wherever you are right now. Because this introduces the same change with a different parent, Git builds a new commit with a different ID.

Show the git tree / reachability
"git log --graph --oneline --decorate -all" 
or
"git log --graph --oneline --decorate <branch-1> <branch-2>" 

"git merge <branch-1> <branch-2>"
- "git merge" will include the currently checked-out branch in the merged version. Hence, one should always checkout one of the branches planned to be merged before doing the merge. Which one you should check out depends on which branch label you want to point to the new commit.

Git conflict resolution during merged explained:http://tedfelix.com/software/git-conflict-resolution.html

"git show <commit-id>" shows the difference between the <commit-id> and its parent ... esp. useful after merge
